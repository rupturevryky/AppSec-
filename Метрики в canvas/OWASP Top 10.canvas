{
	"nodes":[
		{"id":"6a53c87c1bafea81","type":"text","text":"![[OWASP Top 10 web.png]]","x":-1040,"y":-40,"width":520,"height":160,"color":"5"},
		{"id":"3a00c60788a0f2af","type":"text","text":"## **2. Недостатки криптографии**\n\nНедостатки криптографии — это уязвимости, связанные с неправильной настройкой и использованием криптографических методов для защиты данных. К ним относят недостаточную длину ключей, ненадёжные условия их хранения, использование устаревших алгоритмов и другие ошибки в криптографической реализации.\n\n---\n**Что делать:**\n\n- Обновляйте и пересматривайте криптографические методы и ключи с учётом последних рекомендаций и стандартов.\n- Храните криптографические ключи в надёжном месте. Избегайте их хранения вместе с кодом приложения или в открытом виде.\n\n**Чего не стоит делать:**\n\n- Использовать устаревшие или слабые алгоритмы шифрования.\n- Реализовывать собственные криптографические методы, если вы не являетесь экспертом в этой области.\n- Хранить криптографические ключи в открытом виде или внутри кода приложения.","x":-1275,"y":200,"width":480,"height":840},
		{"id":"5aa33e2aebaf9fe2","type":"text","text":"## **3. Инъекции**\n\nИнъекция — это пользовательский ввод с вредоносным кодом. Инъекции включают SQL-запросы, XSS и Comand injection.\n\nИнъекции позволяют злоумышленникам внедрять свой вредоносный код на сервер и выполнять его. Результат — потеря данных, кража данных или повреждение системы.\n\n---\n**Что делать:**\n\n- Используйте параметризованные запросы или ORM (object-relational mapping) для работы с базой данных.\n- Валидируйте и фильтруйте входные данные. Принимайте только допустимые символы и структуры данных.\n- Применяйте принцип наименьших привилегий: ограничивайте права доступа к базе данных необходимыми.\n- Используйте LIMIT и другие элементы управления SQL в запросах для предотвращения массового раскрытия записей в случае SQL-инъекции.\n\n**Чего не стоит делать:**\n\n- Конкатенировать и вставлять непроверенные данные пользователя напрямую в SQL-запросы, команды операционной системы или другие исполняемые на сервере контексты.\n- Надеяться на то, что фильтрация одного типа данных предотвратит инъекции. Злоумышленники могут использовать разные методы атак.\n- Хранить конфиденциальные данные в чистом тексте без шифрования в базе данных.","x":-765,"y":200,"width":525,"height":840},
		{"id":"893bac3c1de38b8a","type":"text","text":"Web","x":-905,"y":-200,"width":250,"height":60,"color":"6"},
		{"id":"b04c614849c77661","type":"text","text":"## **4. Небезопасный дизайн архитектуры приложения**\n\nШирокая категория уязвимостей. Уязвимости этой категории возникают потому, что сама логика работы приложения может позволять использовать существующие функции для взлома.\n\nНапример, в веб-приложение пользователи загружают файлы на сервер без их проверки. Злоумышленники могут использовать эту функцию и загрузить на сервер исполняемый файл с вредоносным кодом.\n\n---\n**Что делать:**\n\n- Продумывайте аспекты безопасности на ранних этапах проектирования приложения.\n- Оценивайте потенциальные угрозы и риски на этапе проектирования и разрабатывайте меры их предотвращения.\n- Обязательно моделируйте угрозы для критической аутентификации, контроля доступа, бизнес-логики и ключевых потоков в приложении.\n- Ограничивайте количество ресурсов на сервере, которое выделяется на одного пользователя и на одну сессию.\n\n**Чего не стоит делать:**\n\n- Полагаться только на обеспечение безопасности на уровне кода. Безопасный дизайн важен для создания надёжной системы в целом.\n- Разрабатывать систему, не учитывая возможные атаки на неё.","x":-200,"y":200,"width":525,"height":840},
		{"id":"2dba0a2f862251ad","type":"text","text":"## **1. Нарушение контроля доступа**\n\nЭто набор уязвимостей, при которых система плохо контролирует уровни доступа к информации или к своей функциональности. Из-за этого злоумышленники могут пользоваться функциями, к которым не должны иметь доступа.\n\n---\n\n**Что делать:**\n\n- Проектируйте контроль доступа на основе принципа наименьших привилегий. Пользователи должны иметь только те права, которые необходимы для выполнения их задач.\n- Проводите аутентификацию и авторизацию на всех уровнях приложения— и на серверной, и на клиентской стороне.\n- Регулярно проводите тестирование и аудит контроля доступа.\n\n**Чего не стоит делать:**\n\n- Полагаться только на скрытие ссылок или кнопок в пользовательском интерфейсе для ограничения доступа. Это не предотвратит доступ к закрытой функциональности по прямым запросам.\n- Доверять пользовательским входным данным при авторизации. Всегда следует проводить проверку на сервере.\n- Оставлять прежней политику контроля доступа при изменении требований и бизнес-логики приложения.","x":-1800,"y":200,"width":485,"height":840},
		{"id":"81a47d981f130b2c","type":"text","text":"## **5. Небезопасная конфигурация**\n\nНебезопасная конфигурация — это ситуация, когда настройки приложения, сервера, базы данных или других компонентов системы не являются безопасными. К этой группе уязвимостей относят ненадёжные или отсутствующие настройки аутентификации, авторизации и доступа.\n\n---\n**Что делать:**\n\n- Проводите безопасную настройку всех компонентов приложения и инфраструктуры, следуя рекомендациям и стандартам безопасности.\n- Продумайте и поддерживайте политику настройки доступов.\n- Отключайте или удаляйте ненужные функции и службы на сервере, чтобы сократить возможный спектр атак.\n- Реализуйте автоматизированный процесс проверки эффективности конфигураций и настроек во всех средах.\n- Регулярно проверяйте настройки на наличие уязвимостей.\n\n**Чего не стоит делать:**\n\n- Оставлять дефолтные пароли, настройки или ключи. Обязательно меняйте их на уникальные и сложные.\n- Оставлять включёнными даже те функции и службы, что кажутся избыточными.\n- Полагаться только на документацию по установке. Проверяйте и дорабатывайте настройки с учётом текущих требований безопасности.","x":-1800,"y":1200,"width":485,"height":860},
		{"id":"ee5435ccb9d01462","type":"text","text":"## **6. Использование уязвимых или устаревших компонентов**\n\nК этому типу уязвимостей относят случаи, когда веб-приложение использует сторонние фреймворки, библиотеки, плагины или другие компоненты, которые имеют выявленные дефекты безопасности.\n\n---\n**Что делать:**\n\n- Регулярно обновляйте используемые компоненты. Следите за выпуском обновлений и исправлений, касающихся безопасности компонентов.\n- Удаляйте неиспользуемые зависимости, ненужные функции, компоненты и файлы.\n- Используйте источники, которые предоставляют информацию о безопасности компонентов: [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/), [Retire.js](https://retirejs.github.io/retire.js/) и другие.\n\n**Чего не стоит делать:**\n\n- Использовать устаревшие компоненты без обновления.\n- Игнорировать предупреждения о безопасности, которые касаются используемых компонентов.","x":-1275,"y":1200,"width":480,"height":860},
		{"id":"aeff43e334d18929","type":"text","text":"## **7. Ошибки идентификации и аутентификации**\n\nСлабые пароли, недостаточная проверка подлинности, неэффективные системы учёта сеансов — всё это OWASP относит к ошибкам идентификации и аутентификации.\n\nСюда же относятся:\n\n- незащищённые способы восстановления паролей — например, подходы на основе знаний, когда человек должен ответить на секретный вопрос;\n- отсутствие многофакторной авторизации;\n- раскрытие идентификатора сессии в URL.\n\n---\n\n**Что делать:**\n\n- Используйте сильные механизмы аутентификации, такие как двухфакторная аутентификация.\n- Требуйте от пользователей создавать пароли с высокой устойчивостью к взлому, включающие в себя не только буквы, но и другие символы.\n- Не раскрывайте идентификаторы сессии в URL-адресе.\n- Блокируйте аккаунты после определённого количества неудачных попыток входа.\n\n**Чего не стоит делать:**\n\n- Разрешать пользователям использовать слабые пароли или пароли по умолчанию.\n- Хранить пароли пользователей в открытом виде в базе данных. Храните хеши паролей [с солью](https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D1%8C_\\(%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F\\)).","x":-765,"y":1200,"width":525,"height":860},
		{"id":"01ce7f5b0955cbf6","type":"text","text":"## **8. Нарушения целостности программного обеспечения и данных**\n\nК этой группе уязвимостей относят случаи, когда после обновления приложение или оборудование начинает работать неправильно. Например, роутер после обновления прошивки не требует пароля для подключения или сбрасывает его до заводского.\n\n---\n\n**Что делать:**\n\n- Используйте проверку целостности данных, используя хеши и цифровые подписи для обнаружения несанкционированных изменений.\n- Ограничивайте доступ и возможность изменения данных для неавторизованных пользователей.\n- Внедряйте подробные журналы и мониторинг подозрительной активности, чтобы сохранять информацию о совершаемых пользователями действиях.\n\n**Чего не стоит делать:**\n\n- Хранить критически важные данные в открытом виде или без требования авторизации.\n- Выдавать всем пользователям полные права на изменение данных. Всегда используйте принцип наименьших привилегий, выдавая только действительно необходимые права.\n- Игнорировать предупреждения системы мониторинга о подозрительной активности. Реагируйте на них своевременно.","x":-200,"y":1200,"width":525,"height":860},
		{"id":"7bb6486e7cf1ddec","type":"text","text":"## **10. Подделка запросов на стороне сервера**\n\nПодделка запросов на стороне сервера (server-side request forgery, SSRF) — это тип уязвимости, при котором злоумышленник заставляет сервер отправлять запросы к внутренним ресурсам или внешним сайтам.\n\nSSRF часто используется злоумышленниками для обнаружения и атаки внутренних ресурсов, к которым они обычно не имеют доступа извне. Представьте веб-приложение, которое выполняет HTTP-запросы к внешним URL-адресам на основе пользовательского ввода. Если сервер слабо защищён от SSRF, злоумышленник может ввести зловредный URL, который заставит сервер отправить запрос ко внутреннему серверу с базой данных, и получить оттуда данные.\n\n---\n**Что делать:**\n\n- Ограничивайте или фильтруйте пользовательский ввод, который используется для формирования запросов.\n- Используйте белый список (whitelist) разрешённых адресов, на которые сервер может отправлять запросы.\n- Ограничьте и контролируйте доступ сервера к внутренним ресурсам.\n\n**Чего не стоит делать:**\n\n- Доверять непроверенным или неконтролируемым URL-адресам, переданным пользователем.\n- Открывать доступ сервера к внутренним ресурсам без проверки.\n- Использовать пользовательский ввод напрямую для формирования запросов на стороне сервера.","x":-502,"y":2240,"width":828,"height":660},
		{"id":"9a772795377e0258","type":"text","text":"## **9. Ошибки логирования и мониторинга безопасности**\n\nЭто уязвимости, при которых система неправильно регистрирует аномальные события, касающиеся безопасности. К ним также относят отсутствие или неправильную настройку механизмов логирования и отсутствие уведомлений о подозрительных событиях.\n\n---\n**Что делать:**\n\n- Внедрите механизмы логирования для регистрации важных событий, таких как попытки аутентификации, изменения в конфигурации и доступе к чувствительным данным.\n- Установите систему мониторинга, которая анализирует логи на наличие подозрительной активности и уведомляет вас об инцидентах.\n- Определите чёткие процедуры реагирования на инциденты и оповещения и обязательно расскажите о них всей команде.\n\n**Чего не стоит делать:**\n\n- Оставлять логирование без внимания. Регулярно анализируйте логи для выявления аномальных событий.\n- Обходиться без мониторинга. Обязательно убедитесь, что система мониторинга активна и правильно настроена.\n- Использовать только автоматические уведомления о состоянии системы. Регулярно вручную проверяйте состояние системы и логов.","x":-1800,"y":2240,"width":765,"height":660},
		{"id":"f0d47b31125e1cec","type":"text","text":"Mobile","x":6203,"y":260,"width":250,"height":60,"color":"6"},
		{"id":"11420835f0f6d081","type":"text","text":"![[OWASP Top 10 Mobile.png]]","x":6080,"y":440,"width":495,"height":360,"color":"5"},
		{"id":"eb2aa3718db930f1","type":"text","text":"API - 2023\n[Современные тенденции в информационной безопасности. Tоп-10 API Security Risks 2023. Угрозы безопасности API и меры по его защите на основе OWASP](https://ib-bank.ru/bisjournal/post/2171)","x":2560,"y":-200,"width":320,"height":180,"color":"6"},
		{"id":"06466e8c416d87b5","type":"text","text":"![[OWASP Top 10 API.png]]","x":2480,"y":100,"width":480,"height":710,"color":"5"},
		{"id":"2f4fa8aa591f3e40","type":"text","text":"## API6: Unrestricted Access to Sensitive Business Flows\n\nUnrestricted Access to Sensitive Business Flows — ситуация, когда API не ограничивает доступ к критическим бизнес-функциям (создание транзакций, изменение балансов, одобрение кредитов и т.п.) на основе ролей или прав пользователя.\n\nГде проявляется:\n> 1. Регистрационные и профильные эндпоинты, куда можно добавить «лишние» поля (mass assignment).\n> 2. Управляющие операции (добавление средств, изменение статусов заявок) без проверок роли.\n\n---\nРекомендации по устранению:\n\n|   |   |   |   |\n|---|---|---|---|\n|**Категория**|**Метод защиты**|**Описание и реализация**|**Примеры/Настройки**|\n|Архитектурные изменения|Whitelist-поля|Принимать только предопределённый набор атрибутов|Разрешённые поля: username, email, password; остальные отклоняются|\n||Слои бизнес-логики|Управление критичными операциями внутри сервисов|Балансы и роли изменяются только внутренними методами, не через клиентский ввод|\n|Middleware и RBAC|Роль-на-уровне-эндпоинта|Явное указание требуемых ролей для каждого endpoint|[router.post](http://router.post/)('/admin/approve-loan', authorize('admin'), ...)|\n||Централизованная проверка ролей|Подтягивание актуальной роли из БД в middleware|Запрос к БД перед обработкой, а не доверие JWT payload|\n|Валидация|Серверная валидация|Проверка отсутствия запрещённых полей (например, balance)|Отклонять запросы, содержащие balance при создании профиля|\n||Схемы данных|Использование строгих схем с запретом дополнительных полей|Joi/JSON Schema с additionalProperties: false|\n|Доп. меры безопасности|MFA для рискованных операций|Многофакторная аутентификация для критичных действий|Подтверждение через SMS/TOTP для переводов > $1000|\n||Rate Limiting & Throttling|Ограничение частоты запросов на чувствительные endpoints|Макс. 5 запросов в минуту на сброс пароля|\n||Мониторинг и алёрты|Отслеживание аномальной активности|Алёрты при резком росте переводов или изменении балансов|","x":1800,"y":2160,"width":880,"height":1080},
		{"id":"f1b18f20c705660b","type":"text","text":"## API5: BFLA (Broken Function Level Authorization) \n\nРассмотрим три определения, которые затрагивают эту уязвимость.\n\n1. **BFLA (Broken Function Level Authorization)** - ошибка авторизации на уровне функций или эндпоинтов API. Приложение проверяет, что пользователь аутентифицирован, но не проверяет, имеет ли он право вызывать конкретную функцию (например, удаление пользователя, одобрение займов и т.п.).\n2. **RBAC (Role-Based Access Control)** - модель управления доступом, при которой правами на функции управляет роль пользователя (админ, менеджер, клиент и т.д.).\n3. **JWT Forging** - взлом JWT-токена путём изменения его полезной нагрузки (payload) и подписи, если сервер не проверяет подпись должным образом.\n\nПошаговая эксплуатация BFLA:\n\n>[!Note] Шаг 1. Регистрация и поиск админ-эндпоинтов\n> 1. Создаём обычный аккаунт (Account B) и изучаем Swagger/OpenAPI-документацию.\n> 2. Находим: энтпоинты вроде DELETE /api/v5/users/{id} или POST /api/v5/loans/{id}/approve, помеченные только для админов.\n\n>[!Note] Шаг 2. Проверка без форжа JWT\n\n>[!Note] Шаг 3. Форжинг JWT для повышения роли\n> Извлекаем токен: копируем JWT из браузера. Декодируем через [jwt.io](http://jwt.io/): получаем header и payload. Меняем is_admin: false → true и сохраняем:\n> \n> Если сервер НИЧЕГО не проверяет кроме подписи, подделка пройдёт. В полученный новый токен вставляем закодированные header+payload, оставляем оригинальную подпись (сервер её не валидирует). Обращаемся к защищённому эндпоинту с поддельным токеном. \n\n---\nРекомендации по защите:\n\n| **Метод защиты**                    | **Описание**                                                                      | **Примеры / Настройки**                                                                                 |\n| ----------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| **Rate Limiting**                   | Ограничение количества запросов с одного IP или пользователя.                     | Не более 100 запросов в минуту.                                                                         |\n| **Пагинация с жёстким cap’ом**      | Ограничение максимального размера выборки данных.                                 | `limit` не больше 100–200. Большие значения отклонять.                                                  |\n| **Таймауты и лимиты памяти**        | Установка ограничений на выполнение запросов и потребление памяти.                | `client_body_timeout`, `worker_memory_limit`, `max_execution_time` (Nginx/Gunicorn/Node.js).            |\n| **Только аутентифицированным**      | Тяжёлые операции разрешены только после проверки прав, с дополнительным throttle. | Экспорт данных, сброс пароля — только для авторизованных пользователей с ограничением частоты запросов. |\n| **Мониторинг и алёрты**             | Система оповещает при аномалиях: скачках RPS, росте задержек, нехватке памяти.    | Алёрты при резком росте запросов или падении свободной памяти.                                          |\n| **Централизованная проверка ролей** | После аутентификации всегда проверять роль пользователя из базы.                  | Запрос в БД или кэш перед доступом к API.                                                               |\n| **Невалидируемый JWT**              | Проверять подпись токена и использовать короткие сроки жизни + refresh-токены.    | `access_token` — 15 минут, `refresh_token` — 7 дней.                                                    |\n| **RBAC на уровне кода**             | Для каждого эндпоинта явно указывать разрешённые роли (декораторы, middleware).   | `@roles_required('admin')` в Python или аннотации в Spring.                                             |\n| **Принцип наименьших привилегий**   | Минимизировать число пользователей с высоким уровнем доступа.                     | Администраторы — только 2-3 человека, остальные — read-only.                                            |\n| **Аудит и логирование**             | Фиксировать все попытки доступа к привилегированным функциям.                     | Логировать `user_id`, `endpoint`, `timestamp`, `status`.                                                |\n\nСоблюдение этих правил надёжно защитит от BFLA-уязвимостей и обеспечит корректную авторизацию на уровне функций.","x":560,"y":2160,"width":1200,"height":1080},
		{"id":"c23f7c96fc2ccdc7","type":"text","text":"## API7: SSRF (Server Side Request Forgery) \n\nSSRF превращает благонамеренные API в оружие против их же инфраструктуры. Server-Side Request Forgery (SSRF) — это когда злоумышленник заставляет сервер делать запросы к внутренним ресурсам, которые никогда не должны быть доступны извне.\n\n\n>[!warning] Где кроется опасность? В любом API, который:\n> - Загружает файлы по URL `/api/upload?url=...`)\n> - Интегрируется с веб-хуками (`/api/webhook?endpoint=...`)\n> - Выполняет сканирование (`/api/scan?target=...`)\n\n---\nНиже — сводная таблица многоуровневых мер защиты от SSRF, охватывающая архитектурные решения, middleware и лучшие практики разработки.\n\n|   |   |\n|---|---|\n|**Архитектурные изменения**|- Выделенные прокси‑сервисы: все исходящие запросы через изолированный микросервис с белым списком доменов  <br>- Zero Trust для внутренних коммуникаций: требуйте mTLS даже для [localhost](http://localhost/)‑запросов|\n|**Middleware‑решения**|- Строгая валидация URL  <br>- Блокировка опасных схем: отклоняйте file://, gopher://, dict://|\n|**Best practices**|1. Сетевой сегментация: отделите worker‑ноды от систем управления  <br>2. Sandbox для рендеринга: запускайте процессы в изолированных контейнерах  <br>3. Глубокий инспектинг: используйте WAF с SSRF‑правилами (блокировка запросов к RFC1918)  <br>4. Харденинг облака: отключите метаданные IMDSv1, используйте IMDSv2|\n|**Факт**|SRF остаётся «тихим убийцей» — 34 % компаний обнаруживают его только после утечки данных|\n|**Чеклист для разработчиков**|1. Все URL‑параметры проходят allow‑list валидацию  <br>2. Заблокированы запросы к приватным IP (10.0.0.0/8, 192.168.0.0/16)  <br>3. Реализован IDOR‑контроль для ресурсных URL  <br>4. Внедрены лимиты на редиректы (max 2)|\n\nЛюбой endpoint, принимающий URL — потенциальная дыра в периметре.","x":2740,"y":2160,"width":900,"height":1080},
		{"id":"cf137dfbdb78cbb6","type":"text","text":"## API8: Security Misconfiguration\n\nВ банковской безопасности происходит больше взломов из-за забытых настроек, чем из-за сложных эксплойтов. Security Misconfiguration (OWASP API8) — это когда система уязвима из-за незащищённых дефолтных настроек, открытых функций или ошибок окружения.\n\n>[!note] Где искать бомбы замедленного действия?\n>\n>Стек технологий: Серверы, СУБД, облачные сервисы\n>\n>**Критические точки:**\n> 1.    Открытый HTTP вместо HTTPS\n> 2.    Продакшн-логи с debug-режимом\n> 3.    Публичная документация Swagger/Redoc\n> 4.    CORS с Access-Control-Allow-Origin: \\*\n> 5.    Предсказуемые сессии (Base64 без подписи)\n \n Пример: В 2019 году через незакрытый эндпоинт /actuator/health хакеры получили топологию всей сети OWASP Corp.\n\n---\nНиже приведена единая таблица по обеспечению комплексных мер по обеспечению безопасности.\n\n| Категория                          | Меры                                                                                                                                                                                                                                                                                                                                                     |\n| ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Архитектурные изменения**        | 1. Строгая сегментация: отдельные VPC для prod/staging/dev<br>2. Immutable‑инфраструктура: пересборка окружений при любых изменениях настроек<br>3. «Тёмные» API: автоматическое отключение неиспользуемых эндпоинтов через IaC                                                                                                                          |\n| **Middleware‑защита**              | 1. Единый security‑gateway<br>2. WAF с кастомными правилами: блокировка запросов к `/actuator/`, `/phpmyadmin`, `/console`                                                                                                                                                                                                                               |\n| **Best practices для разработки**  | 1. HTTPS‑only enforcement: HSTS‑preload + 307 redirect<br>2. Zero‑trust CORS: белые списки доменов<br>3. Безопасность сессий:<br>подписанные/шифрованные куки (SameSite=Strict);<br>JWT с коротким TTL (≤ 15 мин для критичных операций)<br>4. Документация под замком: блокировка Swagger<br>5. Secret‑менеджмент: ротация ключей через HashiCorp Vault |\n| **Чеклист для экстренного аудита** | 1. Все окружения идентичны (config‑as‑code)<br>2. Debug‑режим отключён в prod (уберите `?debug=true`)<br>3. Нет дефолтных учёток `admin/admin`<br>4. Заголовки безопасности включены (XSS, HSTS, CSP)<br>5. Пароли хешируются с солью (bcrypt/scrypt)                                                                                                    |\n\nПомните: Дефолтные настройки безопасны ровно до момента запуска системы","x":3680,"y":2160,"width":1040,"height":1080},
		{"id":"dec25d3ba81800d2","type":"text","text":"## API9: Improper Inventory Management\n\nУязвимость API9: Когда забытые эндпоинты становятся вратами для хакеров. Почему инвентаризация — ваша первая линия обороны\n\nВ банковской безопасности забытые эндпоинты взрывают системы. Improper Inventory Management (API9) — это критический пробел в контроле и документировании API. Без чёткого учёта:\n- Теряется видимость всех конечных точек\n- Растёт поверхность атаки из-за \"теневых\" API\n- Старые версии и dev-эндпоинты остаются доступными\n\n>[!Warning] Пример эксплуатации атаки:\n> Шаг 1: Запрос сброса пароля через текущую версию (v2)\n> Шаг 2: Обход защиты через старую версию (v1)\n> Шаг 3: Компрометация аккаунта\n> \n> Результат: Полный контроль над учётной записью через deprecated-функционал.\n\nНиже представлена единая таблица контрмер для закрытия брешей учёта в API:\n\n| Категория                 | Контрмеры|\n| ------------------------- ||\n| **Архитектурные решения** | 1. Полный инвентарь API: шлюз для маршрутизации<br>2. Политики версионирования<br>3. Сканирование теневых API4. Блокировка non‑prod сред                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| **Тактические меры**      | 1. Ведение реестра API: фиксация всех эндпоинтов (продакшн, тест, сторонние)<br>2. Централизация через API‑шлюз: единая точка контроля трафика<br>3. Чёткое версионирование: пометка и плановое отключение устаревших версий<br>4. Регулярное сканирование для поиска забытых эндпоинтов<br>5. Изоляция non‑prod: запрет доступа к dev/staging из интернета<br>6. Стандартизация документации: единые шаблоны<br>7. Метки для метаданных: версия, среда, ответственный, назначение<br>8. Мониторинг активности: алёрты на использование deprecated‑путей |\n| **Экстренный чеклист**    | 1. Все ли эндпоинты задокументированы?<br>2. Есть ли доступ к dev‑версиям извне?<br>3. Отключены ли старые пути (`/v1`, `/legacy`)?<br>4. Ведутся ли логи использования deprecated‑API?                                                                                                                                                                                                                                                                                                                                                                  |\n\nНеучтённый API — это мина замедленного действия\n\n","x":1780,"y":3400,"width":900,"height":1000},
		{"id":"69bde18b8951875f","type":"text","text":"## API10: Unsafe Consumption of APIs\n\nВ банковской безопасности доверие к сторонним сервисам взрывает системы изнутри. Unsafe Consumption of APIs (API10) — это практика безоговорочного доверия к данным внешних API без проверки или санации. Как следствие: \n1. Внедрение вредоносных нагрузок через цепочки интеграций \n2. Эксплуатация уязвимостей в сторонних сервисах \n3. Критические инциденты из-за неожиданных данных или форматов \n4. Цепная реакция уязвимостей\n\n>[!warning] : Шаги эксплуатации:\n> Шаг 1: Подготовка вредоносной нагрузки\n> Шаг 2: Обход аутентификации через уязвимый API\n\n>[!note] Процесс безопасной интеграции:\n> 1. Внешний API\n> 2. Валидация схемы\n> 3. Санация данных\n> 4. HTTPS + OAuth\n> 5. Лимитирование\n> 6. Мониторинг\n\n>[!note] Экстренный чеклист: \n>1. Все ли внешние данные проходят валидацию? \n>2. Реализована ли санация для потенциально опасных полей? \n>3. Используется ли HTTPS для всех интеграций? \n>4. Есть ли таймауты для внешних вызовов? \n\n---\nКлючевые практики:\n  \n\n|   |   |   |   |\n|---|---|---|---|\n|**Категория**|**Метод защиты**|**Описание и реализация**|**Примеры/Настройки**|\n|Валидация|Жёсткая валидация|Проверка типов, форматов и схем всех входящих данных|Использование Joi/JSON Schema с strict-режимом|\n|Аутентификация|Аутентификация источников|Верификация легитимности API-вызовов|OAuth 2.0, API-ключи с ограниченным scope|\n|Обработка данных|Глубокая санация|Очистка данных от опасных конструкций|Экранирование HTML/SQL, удаление тегов через DOMPurify|\n|Обработка ошибок|Защита ошибок|Безопасные сообщения без технических деталей|Общие фразы: \"Ошибка авторизации\" вместо \"Неверный JWT-токен\"|\n|Защита от DoS|Лимиты запросов|Ограничение частоты вызовов цепочек API|100 запросов/минуту на цепочку зависимых endpoints|\n|Управление API|Контроль версий|Отказ от устаревших версий интегрируемых API|Deprecation-политика с 6-месячным переходным периодом|\n|Надёжность|Таймауты|Автоматическое прерывание зависших запросов|5s timeout для внешних API-вызовов, 30s для внутренних|\n|Мониторинг|Активный мониторинг|Анализ аномалий в ответ||","x":2740,"y":3400,"width":940,"height":1440},
		{"id":"193ae414ab1c79bb","type":"text","text":"## API3: BOPLA (Broken Object Property Level Authorization)\n\nBroken Object Property Level Authorization (BOPLA) - менее известная, но опасная уязвимость API, в которой пользователи могут изменять конкретные поля или свойства объекта, к которым они не должны иметь доступа, даже если им разрешен доступ к самому объекту.\n\nДве существенные уязвимости составляют BOPLA:\n\n> **Чрезмерное воздействие данных:**\n> Эта уязвимость возникает, когда API раскрывает клиенту больше данных, чем необходимо. Обычно API возвращают только данные, необходимые для функциональности пользователя для выполнения его задачи. Однако, в случае чрезмерного воздействия данных, API может вернуть конфиденциальную информацию, такую как: _Admin status (is_admin: true)_\n\n> **Массовое назначение:**\n> Массовое назначение - это уязвимость, которая возникает, когда API или сервер неправильно доверяет данным, отправляемым с клиентской стороны. В типичном API, пользователи могут отправлять запросы с данными, а сервер должен принимать и обрабатывать только определенные поля (например, имя пользователя, электронная почта или пароль). Однако при массовом назначении злоумышленник может отправлять дополнительные параметры, которым сервер ошибочно доверяет и обрабатывает.\n\n---\nНиже приведена сводная таблица рекомендаций по устранению уязвимости BOPLA (Broken Object Property Level Authorization), охватывающая основные меры защиты.\n\n|Рекомендация|Описание|\n|---|---|\n|**1. Whitelist полей**|На стороне сервера явно перечислять допустимые атрибуты (например, `username`, `email`, `password`) и отбрасывать все остальные поля запроса.|\n|**2. Игнорирование или валидация посторонних полей**|Любые поля вне заранее определённого списка либо игнорируются без объяснений, либо вызывают ошибку с указанием недопустимого атрибута.|\n|**3. Управление «чувствительными» свойствами на сервере**|Флаги `is_admin`, `role`, `balance` и прочие критичные свойства устанавливаются исключительно бизнес‑логикой на стороне сервера и никогда не принимаются из запроса.|\n|**4. Логирование и мониторинг**|Фиксировать все попытки передачи запрещённых полей и оперативно оповещать администраторов о подозрительной активности для последующего расследования.|","x":2720,"y":1000,"width":920,"height":960},
		{"id":"1441eed3378d9e6e","type":"text","text":"## API2: Broken Authentication\n\nBroken authentication — это уязвимость в процессе аутентификации или управлении сессиями веб-приложения, которая позволяет неавторизованным пользователям получать доступ к защищённым данным и ресурсам.\n\n> [!warning] Пример эксплуатации:\n> 1. Инициируем запрос сброса пароля. Для этого аутентифицируемся как Account B и отправляем запрос на сброс пароля для Account A\n> 2. В безопасных реалиях, flow должен сначала проверить, что токен соответствует тому же пользователю, чей пароль сбрасывается, или же отправить на почту одноразовый токен. Мы убедились, что это небезопасные реалии.\n>    \n>    Пофаззим PIN-код - подставляем в поле reset_pin все трехзначные комбинации, чтобы найти валидный.\n>    \n>    Можно использовать следующую команду (Либо BurpSuite):\n>    ```\n>    wfuzz -d ‘{“username”:”test”, “reset_pin”:”FUZZ”, “new_password”:” reset@021”}’ -H ‘Content-type: application/json’ -z file,/usr/share/wordlists/wfuzz/digits-000-999.txt -u [http://127.0.0.1:5000/api/v2/reset-password](http://127.0.0.1:5000/api/v2/reset-password) –hc 400\n>    ```\n>    \n\n---\nЗащитные меры:\n\n|Мера|Описание|\n|---|---|\n|**1. Проверка владельца или подтверждения по email**|Гарантировать, что все критичные операции (сброс пароля, изменение профиля и т.п.) выполняются только самим владельцем учётной записи или после подтверждения по email.|\n|**2. Отдельная верификация для смены пароля**|Никогда не обрабатывать в одном запросе и email, и новый пароль без предварительной проверки владения почтой через отправку и подтверждение специального кода.|\n|**3. Лимиты попыток и логирование неудач**|Ограничивать число попыток ввода PIN или кодов подтверждения и фиксировать все неуспешные попытки для своевременного обнаружения грубого подбора (фаззинга).|","x":1800,"y":1000,"width":880,"height":960},
		{"id":"8601d679daf1ec98","type":"text","text":"## API4: Unrestricted Resource Consumption\n\nUnrestricted Resource Consumption — ситуация, когда API не накладывает ограничения на потребление ресурсов (число запросов, объём данных, время выполнения операций, количество параллельных соединений и т.п.). Это позволяет злоумышленникам или случайным пользователям исчерпать CPU, память, пропускную способность сети или нагрузить базу данных настолько, что сервис упадёт или будет серьёзно деградировать (DoS).\n\n---\n\nРекомендации по защите:\n\n| **Метод защиты**               | **Описание**                                                                      | **Примеры / Настройки**                                                                                 |\n| ------------------------------ | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| **Rate Limiting**              | Ограничение количества запросов с одного IP или пользователя.                     | Не более 100 запросов в минуту.                                                                         |\n| **Пагинация с жёстким cap’ом** | Ограничение максимального размера выборки данных.                                 | limit не больше 100–200. Большие значения отклонять.                                                    |\n| **Таймауты и лимиты памяти**   | Установка ограничений на выполнение запросов и потребление памяти.                | client_body_timeout, worker_memory_limit, max_execution_time (Nginx/Gunicorn/Node.js).                  |\n| **Только аутентифицированным** | Тяжёлые операции разрешены только после проверки прав, с дополнительным throttle. | Экспорт данных, сброс пароля — только для авторизованных пользователей с ограничением частоты запросов. |\n| **Мониторинг и алёрты**        | Система оповещает при аномалиях: скачках RPS, росте задержек, нехватке памяти.    |                                                                                                         |","x":3680,"y":1000,"width":840,"height":960},
		{"id":"22d811c613b61ac9","type":"text","text":"## API 1: Broken Object Level Authorization (BOLA)\n\nBroken Object Level Authorization (BOLA) (ранее известна как Insecure Direct Object Reference (IDOR)) — уязвимость безопасности в API, которая позволяет злоумышленникам получать доступ к данным, изменяя идентификатор объекта в запросе.\n\n---\nПринцип работы:\n\nЗлоумышленники анализируют запросы и ответы API, ищут шаблоны в том, как объекты упоминаются в запросах (например, /users/{userID} или /orders/{orderID}). Затем они меняют значение идентификаторов объектов в своих запросах, пытаясь получить доступ к данным, принадлежащим другим пользователям или ресурсам. Защитные меры:\n\n|Мера|Описание|Пример реализации|\n|---|---|---|\n|**1. Проверка соответствия ID пользователя**|Убедиться, что ID аутентифицированного пользователя совпадает с запрашиваемым ресурсом|В middleware перед контроллером: извлечь `userId` из JWT и сравнить с `accountId` в URL`js<br>const userId =` [`req.user.id`](http://req.user.id/)`;<br>const accountId = req.params.accountId;<br>if (userId !== accountId) throw new Error('Access denied');<br>next();`|\n|**2. Не полагаться на клиентский ввод для прав доступа**|Всегда брать `userId` из безопасного источника (JWT-токена или сессии), а не из тела запроса или заголовков|`js<br>// Только из проверенного токена<br>const userId =` [`req.user.id`](http://req.user.id/)`;<br>// Не так:<br>// const userId = req.body.userId;<br>`|\n|**3. Серверные проверки для каждого CRUD-оператора**|Гарантировать авторизацию на уровне сервера для всех операций Create, Read, Update и Delete|Реализовать в каждом маршруте/контроллере проверку прав:`js<br>router.put('/accounts/:id', authMiddleware, async (req, res) => {<br> // проверка прав и логика обновления<br>});`|","x":880,"y":1000,"width":880,"height":960},
		{"id":"e4ae17fe49c73ff6","type":"text","text":"#### \\[M1] Неправильное использование учетных данных / Improper Credential Usage\n\n>[!note] **Суть риска:** \n>Приложение неправильно обрабатывает, хранит или передает учетные данные (пароли, токены, сессии, PIN-коды), что позволяет злоумышленнику выдать себя за легитимного пользователя.\n\n- **Что это значит:** Жесткая запись (хардкод) ключей API и секретов в код, небезопасное хранение токенов (например, в файлах или `UserDefaults` без защиты), повторное использование сессий, слабая политика блокировки экрана.\n    \n>[!warning] **Пример:** \n>Ключ доступа к облачному хранилищу вшит в код приложения. Злоумышленник легко извлекает его путем декомпиляции и получает доступ к данным всех пользователей.\n    \n- **Защита:** Использовать безопасные хранилища (`Keychain`/`Keystore`), биометрическую аутентификацию, OAuth 2.0/OpenID Connect, никогда не хранить секреты на клиенте.","x":5120,"y":960,"width":580,"height":640},
		{"id":"f5506a967832a553","type":"text","text":"#### \\[M2] Недостаточная безопасность цепочки поставок / Inadequate Supply Chain Security\n\n>[!note] **Суть риска:** \n>Приложение использует небезопасные сторонние компоненты (библиотеки, SDK, фреймворки) с уязвимостями или зависимость от ненадежных процессов сборки и распространения.\n\n- **Что это значит:** Уязвимости в сторонних SDK (реклама, аналитика), использование устаревших библиотек с известными CVE, компрометация инструментов CI/CD, публикация в сторы скомпрометированных сборок.\n    \n>[!warning] **Пример:** \n>Популярная библиотека для работы с изображениями содержит RCE-уязвимость. Тысячи приложений, использующих ее, становятся уязвимыми.\n    \n- **Защита:** Регулярный аудит зависимостей (SCA), использование только доверенных компонентов, подписывание кода, безопасная настройка CI/CD.","x":5720,"y":960,"width":580,"height":640},
		{"id":"d8e0ab1000f20a44","type":"text","text":"#### \\[M3] Небезопасная аутентификация и авторизация / Insecure Authentication/Authorization\n\n>[!note] **Суть риска:** \n>Слабые или обходные механизмы для проверки личности пользователя (аутентификация) и его прав на действия (авторизация).\n\n- **Что это значит:** Слабые пароли/PIN-коды, отсутствие многофакторной аутентификации (MFA), уязвимости в восстановлении пароля, неправильная проверка прав на стороне клиента (IDOR — Insecure Direct Object Reference).\n    \n>[!warning] **Пример:** \n>Изменение параметра `user_id=123` на `user_id=124` в запросе к API позволяет просмотреть чужой профиль, если сервер не проверяет права.\n    \n- **Защита:** Внедрение MFA, строгая политика паролей, выполнение всей критичной логики авторизации на сервере.","x":6340,"y":960,"width":580,"height":640},
		{"id":"4720a4bec0b3a06f","type":"text","text":"#### \\[M4] Недостаточная проверка ввода/вывода / Insufficient Input/Output Validation\n\n>[!note] **Суть риска:** \n>Приложение не проверяет должным образом данные, полученные из внешних источников (пользователь, сервер, другие приложения), что приводит к инъекциям и другим атакам.\n\n- **Что это значит:** Данные не проверяются перед использованием в SQL-запросах к локальной БД, передачей в WebView или выполнением на сервере.\n    \n>[!warning] **Пример:** \n>Поисковый запрос пользователя передается напрямую в SQLite, позволяя злоумышленнику извлечь или удалить локальные данные приложения (SQL-инъекция).\n    \n- **Защита:** Строгая валидация и санитизация всех входных данных, использование параметризованных запросов, экранирование вывода для WebView.","x":6960,"y":960,"width":580,"height":640},
		{"id":"9b35b5ecfa98d07f","type":"text","text":"#### \\[M5] Небезопасное взаимодействие / Insecure Communication\n\n>[!note] **Суть риска:** \n>Приложение передает данные по незащищенным или неправильно настроенным каналам связи, что позволяет перехватить или изменить информацию.\n\n- **Что это значит:** Использование HTTP вместо HTTPS, отключение проверки SSL-сертификатов, уязвимости к атакам \"человек посередине\" (MitM).\n    \n>[!warning] **Пример:** \n>Приложение отключает проверку SSL-сертификата для \"совместимости\", что позволяет злоумышленнику в той же сети перехватывать трафик.\n    \n- **Защита:** Использование TLS с надежными настройками, проверка сертификатов сервера, реализация certificate pinning для критичных приложений.","x":5120,"y":1680,"width":580,"height":600},
		{"id":"a664f181e521e1a6","type":"text","text":"#### \\[M7] Недостаточная защита бинарного кода / Insufficient Binary Protections\n\n>[!note] **Суть риска:** \n>Приложение легко поддается обратной инженерии, модификации (взлому) и отладке, что позволяет обойти защиту, изменить логику или извлечь секреты.\n\n- **Что это значит:** Отсутствие обфускации кода, возможность отладки в релизной сборке, слабая защита от рутирования/джейлбрейка, отсутствие проверки целостства приложения.\n    \n>[!warning] **Пример:** \n>Злоумышленник деобфусцирует код приложения, находит алгоритм проверки подписки, патчит его и распространяет взломанную версию.\n    \n- **Защита:** Обфускация кода, проверка на рутинг/джейлбрейк, проверка целостства приложения (anti-tampering), затруднение отладки.","x":6340,"y":1680,"width":580,"height":600},
		{"id":"26cfdf632c4c04ac","type":"text","text":"#### \\[M8] Небезопасная конфигурация / Security Misconfiguration\n\n>[!note] **Суть риска:** \n>Компоненты приложения, сервера или облачной инфраструктуры имеют небезопасные настройки по умолчанию или были настроены с ошибками.\n\n- **Что это значит:** Включенные отладочные функции в продакшене, ненужные открытые порты на бэкенде, разрешения компонентов ОС (например, `android:exported=\"true\"` без необходимости).\n    \n>[!warning] **Пример:** \n>Серверная часть приложения оставляет открытыми директории с файлами логов, содержащими токены сессий.\n    \n- **Защита:** Использование \"затвердевших\" (hardened) конфигураций для всех компонентов, регулярный аудит настроек, автоматизация развертывания.","x":6960,"y":1680,"width":580,"height":600},
		{"id":"ed0de217a3d3d850","type":"text","text":"#### \\[M6] Неадекватные средства контроля конфиденциальности / Inadequate Privacy Controls\n\n>[!note] **Суть риска:** \n>Приложение обрабатывает персональные данные (PII) способом, нарушающим ожидания пользователя и законодательство (GDPR, CCPA и т.д.).\n\n- **Что это значит:** Сбор данных, не необходимых для функционала, отсутствие понятного согласия, передача данных третьим лицам без анонимизации, хранение дольше требуемого срока.\n    \n>[!warning] **Пример:** \n>Приложение \"Блокнот\" запрашивает доступ к геолокации и контактам и отправляет их рекламной сети.\n    \n- **Защита:** Privacy by Design, минимизация сбор данных, прозрачная политика конфиденциальности, получение явного согласия пользователя.","x":5720,"y":1680,"width":580,"height":600},
		{"id":"6e005409920acb85","type":"text","text":"#### \\[M10] Недостаточная криптография / Insufficient Cryptography\n\n>[!note] **Суть риска:** \n>Использование устаревших, небезопасных или кастомных криптографических алгоритмов, а также их неправильная реализация для защиты данных.\n\n- **Что это значит:** Использование XOR, Base64 или MD5/SHA1 для \"шифрования\", хранение ключей шифрования рядом с зашифрованными данными, использование уязвимых режимов (например, ECB).\n    \n>[!warning] **Пример:** \n>Приложение \"шифрует\" данные пользователя с помощью самописного алгоритма на основе XOR, который легко взламывается.\n    \n- **Защита:** Использование современных, проверенных алгоритмов (AES-GCM, RSA-OAEP, PBKDF2) из стандартных библиотек, безопасная генерация и хранение ключей.","x":6340,"y":2360,"width":580,"height":640},
		{"id":"f878de2d01de4209","type":"text","text":"#### \\[M9] Небезопасное хранение данных / Insecure Data Storage\n\n>[!note] **Суть риска:** \n>Конфиденциальные данные (ключи, PII, токены) хранятся в незащищенных местах на устройстве, где другие приложения или пользователь могут их прочитать.\n\n- **Что это значит:** Хранение данных в файлах с общедоступными правами, в `NSUserDefaults`/`SharedPreferences`, кэширование критичной информации в логах или скриншотах.\n    \n>[!warning] **Пример:** \n>Приложение кэширует детали банковской карты в незашифрованной базе SQLite в общедоступной директории.\n    \n- **Защита:** Хранение критичных данных только в защищенных хранилищах (`Keychain`/`Keystore`), шифрование файлов и баз данных, запрет на скриншоты для чувствительных экранов.","x":5720,"y":2360,"width":580,"height":640},
		{"id":"16ed7b95d8b56d22","type":"text","text":"Data Security Top 10 2025","x":-930,"y":3190,"width":275,"height":50,"color":"6"},
		{"id":"c40c1d6bf7678b2b","type":"text","text":"#### **DATA1:2025 - Атаки с инъекциями (Injection Attacks)**\n\n---\n>[!note] **Суть риска:** \n>Злоумышленник внедряет вредоносные команды или данные в систему, чтобы обмануть ее и заставить выполнить нежелательные действия. Это приводит к несанкционированному доступу, краже, изменению или удалению данных.\n    \n>[!warning] **Пример:** \n>SQL-инъекции (кража данных из БД), NoSQL-инъекции, инъекции в ОС (командная строка), LDAP-инъекции.\n    \n>[!tip] **Защита:** \n>Использование подготовленных запросов (prepared statements), валидация и санитизация входных данных, принцип наименьших привилегий для доступа к БД.","x":-2050,"y":3510,"width":580,"height":720},
		{"id":"ee512437497bb114","type":"text","text":"#### **DATA2:2025 - Небезопасная аутентификация и контроль доступа (Broken Authentication and Access Control)**\n\n---\n>[!note] **Суть риска:** \n>Слабые механизмы проверки подлинности и неправильная настройка прав доступа позволяют атакующим выдавать себя за других пользователей или получать доступ к данным, которые им не предназначены.\n    \n>[!warning] **Пример:** \n>Слабые или стандартные пароли, уязвимости в сессиях, неправильная настройка ролей (например, обычный пользователь получает права администратора).\n    \n>[!tip] **Защита:** \n>Многофакторная аутентификация (MFA), надежная политика паролей, обязательная проверка прав доступа на стороне сервера для каждого запроса.","x":-1425,"y":3510,"width":580,"height":720},
		{"id":"ff548498bd22d81d","type":"text","text":"#### **DATA5:2025 - Угрозы со стороны инсайдеров (Insider Threats)**\n\n---\n>[!note] **Суть риска:** \n>Текущие или бывшие сотрудники, подрядчики или партнеры, которые имеют легальный доступ к данным и используют его во вред организации (умышленно или по неосторожности).\n    \n>[!warning] **Пример:** \n>Недовольный сотрудник крадет клиентскую базу; сотрудник по ошибке отправляет данные не тому человеку.\n    \n>[!tip] **Защита:** \n> Принцип наименьших привилегий, мониторинг аномальной активности (например, массовая загрузка данных), exit-процедуры при увольнении.","x":-2050,"y":4310,"width":580,"height":640},
		{"id":"c297eed42e369dcb","type":"text","text":"#### **DATA6:2025 - Слабая криптография (Weak Cryptography)**\n\n---\n>[!note] **Суть риска:** \n>Использование устаревших или ненадежных криптографических алгоритмов, протоколов, неправильная реализация или слабые ключи, что делает защиту данных неэффективной.\n    \n>[!warning] **Пример:** \n>Использование устаревших алгоритмов (например, MD5, SHA-1, DES), самописные методы шифрования, неправильное хранение ключей шифрования.\n    \n>[!tip] **Защита:** \n>Использование современных, проверенных алгоритмов (AES, RSA с достаточной длиной ключа, TLS 1.3), использование надежных генераторов случайных чисел, безопасное управление ключами.","x":-1425,"y":4310,"width":580,"height":640},
		{"id":"0ac214d18fa940ba","type":"text","text":"#### **DATA9:2025 - Учет и управление данными (Data Inventory and Data Management)**\n\n---\n>[!note] **Суть риска:** \n>Невозможно защитить то, о чем вы не знаете. Отсутствие полного реестра данных, их классификации и понимания потоков приводит к \"слепым зонам\" в безопасности.\n    \n>[!warning] **Пример:** \n>Неизвестное расположение всех копий базы данных клиентов; отсутствие маркировки данных по степени конфиденциальности.\n    \n>[!tip] **Защита:** \n>Создание и поддержание реестра активов данных, классификация данных (публичные, внутренние, конфиденциальные), составление карт потоков данных (Data Flow Diagrams).","x":-1425,"y":5030,"width":580,"height":640},
		{"id":"3a39acb8062c03f1","type":"text","text":"#### **DATA3:2025 - Утечки данных (Data Breaches)**\n\n---\n>[!note] **Суть риска:** \n>Инциденты, при которых конфиденциальные, защищенные или закрытые данные просматриваются, крадутся или используются неавторизованными лицами. Это не причина, а _результат_ реализации других угроз.\n    \n>[!warning] **Пример:** \n>Взлом базы данных, публикация данных по ошибке, компрометация облачного хранилища.\n    \n>[!tip] **Защита:** \n>Шифрование данных на rest и в transit, сегментация сетей, мониторинг и быстрое реагирование на инциденты (SIEM/SOC).","x":-770,"y":3510,"width":580,"height":720},
		{"id":"f929df6e15d662d4","type":"text","text":"#### **DATA4:2025 - Атаки с использованием вредоносного ПО и программ-вымогателей (Malware and Ransomware Attacks)**\n\n---\n>[!note] **Суть риска:** \n>Вредоносное программное обеспечение (включая ransomware) проникает в систему, чтобы украсть, зашифровать или заблокировать доступ к данным с последующим требованием выкупа.\n    \n>[!warning] **Пример:** \n>Заражение через фишинговые письма, уязвимое ПО; шифрование файлов на серверах и рабочих станциях.\n    \n>[!tip] **Защита:** \n>Регулярное обновление ПО и антивирусов, обучение пользователей, строгие политики выполнения приложений, надежное и регулярное резервное копирование.","x":-130,"y":3510,"width":580,"height":720},
		{"id":"304eaf8f667b7006","type":"text","text":"#### **DATA8:2025 - Неадекватная безопасность третьих сторон (Inadequate Third-Party Security)**\n\n---\n>[!note] **Суть риска:** \n>Риски безопасности данных возникают из-за слабой защиты у поставщиков, партнеров или любых сторонних сервисов, имеющих доступ к вашим системам или данным.\n    \n>[!warning] **Пример:** \n>Утечка данных из-за уязвимости в облачном провайдере; компрометация данных через систему подрядчика.\n    \n>[!tip] **Защита:** \n>Тщательная проверка (due diligence) поставщиков, включение требований безопасности в договоры, регулярный аудит.","x":-130,"y":4310,"width":580,"height":640},
		{"id":"837cb390cbe6c4e6","type":"text","text":"#### **DATA7:2025 - Небезопасное обращение с данными (Insecure Data Handling)**\n\n---\n>[!note] **Суть риска:** \n>Данные не защищаются надлежащим образом на всех этапах их жизненного цикла: передача, хранение, обработка и уничтожение.\n    \n>[!warning] **Пример:** \n>Передача конфиденциальных данных по незашифрованным каналам (HTTP), хранение паролей в открытом виде, выбрасывание жестких дисков без их очистки.\n    \n>[!tip] **Защита:** \n>Шифрование везде, где это возможно, безопасные методы утилизации данных (physical и digital), политики обработки данных.","x":-770,"y":4310,"width":580,"height":640},
		{"id":"7557c581259cc416","type":"text","text":"#### **DATA10:2025 - Несоответствие правилам защиты данных (Non-Compliance with Data Protection Regulations)**\n\n---\n>[!note] **Суть риска:** \n>Несоблюдение юридических и регуляторных требований к защите данных, что ведет к штрафам, судебным искам и репутационным потерям.\n    \n>[!warning] **Пример:** \n>Нарушения GDPR, 152-ФЗ (О персональных данных в РФ), CCPA, HIPAA и др.\n    \n>[!tip] **Защита:** \n>Регулярные аудиты на соответствие, внедрение принципов \"Privacy by Design\", назначение ответственного за защиту данных (DPO).","x":-770,"y":5030,"width":580,"height":640}
	],
	"edges":[
		{"id":"d109c60cee9c4420","fromNode":"893bac3c1de38b8a","fromSide":"bottom","toNode":"6a53c87c1bafea81","toSide":"top"},
		{"id":"76305cc088e11448","fromNode":"f0d47b31125e1cec","fromSide":"bottom","toNode":"11420835f0f6d081","toSide":"top"},
		{"id":"51dbdaf8c4531531","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"2dba0a2f862251ad","toSide":"top"},
		{"id":"213cd6e736525d18","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"3a00c60788a0f2af","toSide":"top"},
		{"id":"854181bc14dbfc33","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"5aa33e2aebaf9fe2","toSide":"top"},
		{"id":"f038ce51871a3157","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"b04c614849c77661","toSide":"top"},
		{"id":"653c1ca967b66742","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"81a47d981f130b2c","toSide":"top"},
		{"id":"53c4f3e455c180fa","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"ee5435ccb9d01462","toSide":"top"},
		{"id":"87b3ebeaefcb66cc","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"aeff43e334d18929","toSide":"top"},
		{"id":"5c958de91099eda7","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"01ce7f5b0955cbf6","toSide":"top"},
		{"id":"c232311f291e719a","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"9a772795377e0258","toSide":"top"},
		{"id":"54fb87056b195116","fromNode":"6a53c87c1bafea81","fromSide":"bottom","toNode":"7bb6486e7cf1ddec","toSide":"top"},
		{"id":"6ce62ffd9a839cc9","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"22d811c613b61ac9","toSide":"top"},
		{"id":"5faaff5cb7168767","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"1441eed3378d9e6e","toSide":"top"},
		{"id":"cb8fd521eb880a48","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"193ae414ab1c79bb","toSide":"top"},
		{"id":"8a73c916142e7ba0","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"8601d679daf1ec98","toSide":"top"},
		{"id":"d54bf60ef8f21031","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"f1b18f20c705660b","toSide":"top"},
		{"id":"11854a42e23261a5","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"2f4fa8aa591f3e40","toSide":"top"},
		{"id":"bffa7598152a2994","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"c23f7c96fc2ccdc7","toSide":"top"},
		{"id":"f4b26449f4972c8d","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"cf137dfbdb78cbb6","toSide":"top"},
		{"id":"4552f0d23373504c","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"dec25d3ba81800d2","toSide":"top"},
		{"id":"3e3888fe557db2c4","fromNode":"06466e8c416d87b5","fromSide":"bottom","toNode":"69bde18b8951875f","toSide":"top"},
		{"id":"9174960000efdb55","fromNode":"eb2aa3718db930f1","fromSide":"bottom","toNode":"06466e8c416d87b5","toSide":"top"},
		{"id":"c43d7b6e0c0d1b07","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"e4ae17fe49c73ff6","toSide":"top"},
		{"id":"9e54fe0c9c20a3c4","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"f5506a967832a553","toSide":"top"},
		{"id":"8cccf9585592b01e","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"d8e0ab1000f20a44","toSide":"top"},
		{"id":"b47e5cfc328c8f5d","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"4720a4bec0b3a06f","toSide":"top"},
		{"id":"d85d6c962f997678","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"9b35b5ecfa98d07f","toSide":"top"},
		{"id":"e2f5dbb50900d7bc","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"ed0de217a3d3d850","toSide":"top"},
		{"id":"f6abf9b1852721b7","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"a664f181e521e1a6","toSide":"top"},
		{"id":"7d91f7b527175399","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"26cfdf632c4c04ac","toSide":"top"},
		{"id":"cf37a10053e277e8","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"f878de2d01de4209","toSide":"top"},
		{"id":"08c0990e66ae8089","fromNode":"11420835f0f6d081","fromSide":"bottom","toNode":"6e005409920acb85","toSide":"top"},
		{"id":"43c0b8cf99951e45","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"c40c1d6bf7678b2b","toSide":"top"},
		{"id":"f75f5789b92d2600","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"ee512437497bb114","toSide":"top"},
		{"id":"b57ff89908720a8e","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"3a39acb8062c03f1","toSide":"top"},
		{"id":"d728923a3a29dfb7","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"f929df6e15d662d4","toSide":"top"},
		{"id":"101d18f146aa2769","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"ff548498bd22d81d","toSide":"top"},
		{"id":"0f792acd9773d7bf","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"c297eed42e369dcb","toSide":"top"},
		{"id":"7e1eb2ca5a626df8","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"837cb390cbe6c4e6","toSide":"top"},
		{"id":"b1a1ece07efce3db","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"304eaf8f667b7006","toSide":"top"},
		{"id":"fbb5dc302766e3d5","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"0ac214d18fa940ba","toSide":"top"},
		{"id":"135cc1518f496ef0","fromNode":"16ed7b95d8b56d22","fromSide":"bottom","toNode":"7557c581259cc416","toSide":"top"}
	]
}